name: Deploy Event Driven Sample

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: 6.0.x
  OUTPUT_PATH: ${{ github.workspace }}/.output

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:

  create-keyvault:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: Azure/cli@v1
        name: Create Key-vault
        with:
          inlineScript: |
            az keyvault create --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.KEYVAULT_NAME }} --enabled-for-template-deployment true
            
  lint:
    runs-on: ubuntu-latest
    needs: create-keyvault
    steps:
      - uses: actions/checkout@v2
      - name: Run Bicep Linter
        run: az bicep build --file ./deploy/main.bicep
  
  validate:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/arm-deploy@v1
        name: Run preflight validation
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./deploy/main.bicep
          deploymentMode: Validate
  
  preview:
    runs-on: ubuntu-latest
    needs: [lint, validate]
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: Azure/cli@v1
        name: Run What-If command
        with:
          inlineScript: |
            az deployment group what-if --resource-group ${{ secrets.AZURE_RG }} --template-file ./deploy/main.bicep --parameters ./deploy/parameters.json
  
  deploy-infra:
    runs-on: ubuntu-latest
    environment: Production
    needs: preview
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/arm-deploy@v1
        name: Deploy Bicep File
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./deploy/main.bicep
          parameters: ./deploy/parameters.json
          failOnStdErr: false

  build-function:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        name: Setup Dotnet ${{ env.DOTNET_VERSION }} Environment
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Publish Function Artifacts
        run: dotnet publish ./src/DeviceReader/DeviceReader/DeviceReader.csproj --configuration Release --output ${{ env.OUTPUT_PATH }}
      - uses: actions/upload-artifact@v1
        name: Package Function Artifacts
        with:
          name: functions
          path: ${{ env.OUTPUT_PATH }}

  deploy-function:
    runs-on: ubuntu-latest
    environment: Production
    needs: build-function
    steps:
      - uses: actions/download-artifact@v1
        name: Download Function Artifacts
        with:
          name: functions
          path: ${{ env.OUTPUT_PATH }}
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get Function Name
        id: getfunctionname
        run: |
          a=$(az functionapp list --resource-group ${{ secrets.AZURE_RG}} --query '[].{Name: name}' -o tsv)
          echo "::set-output name=appName::$a"
      - uses: Azure/functions-action@v1
        name: Deploy Function to Azure
        with:
          app-name: ${{ steps.getfunctionname.outputs.appName }}
          package: ${{ env.OUTPUT_PATH }}
